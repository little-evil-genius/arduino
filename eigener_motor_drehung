#define STEPPER_PIN_1 8
#define STEPPER_PIN_2 9
#define STEPPER_PIN_3 10
#define STEPPER_PIN_4 11
int step_number = 0;

int ldr1 = A0; // Pin für den ersten Fotowiderstand (LDR)
int ldr2 = A1; // Pin für den zweiten Fotowiderstand (LDR)
int sensorwert1 = 0; // Variable für den Sensorwert des ersten LDR mit 0 als Startwert
int sensorwert2 = 0; // Variable für den Sensorwert des zweiten LDR mit 0 als Startwert
int tolerance = 20;

void setup() {
  Serial.begin(9600);
  pinMode(STEPPER_PIN_1, OUTPUT);
  pinMode(STEPPER_PIN_2, OUTPUT);
  pinMode(STEPPER_PIN_3, OUTPUT);
  pinMode(STEPPER_PIN_4, OUTPUT);
}

void loop()
{
  sensorwert1 = analogRead(ldr1);
  sensorwert2 = analogRead(ldr2);

  //Serial.print("Sensorwert 1 = ");
  Serial.println(sensorwert1);

  //Serial.print("Sensorwert 2 = ");
  Serial.println(sensorwert2);

  // Überprüfen, welcher Senser mehr Sonne misst
  if (sensorwert1 > sensorwert2)
  { // LDR 1 misst mehr Sonne
    //diffWerte = sensorwert1-sensorwert2;

    // Wenn mehr Licht auf LDR 1 scheint, drehe den Schrittmotor nach links
    OneStep(true);
  } else if (sensorwert2 > sensorwert1) 
  { // LDR 2 misst mehr Sonne
    //diffWerte = sensorwert2-sensorwert1;

    // Wenn mehr Licht auf LDR 2 scheint, drehe den Schrittmotor nach rechts
    OneStep(false);
  }
}

void OneStep(bool dir){
  if(dir){
    switch(step_number){
      case 0:
        digitalWrite(STEPPER_PIN_1, HIGH);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 1:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, HIGH);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 2:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, HIGH);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 3:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, HIGH);
        break;
    } 
  } else {
    switch(step_number){
      case 0:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, HIGH);
        break;
      case 1:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, HIGH);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 2:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, HIGH);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 3:
        digitalWrite(STEPPER_PIN_1, HIGH);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
    }
  }
  
  step_number++;
  if(step_number > 3){
    step_number = 0;
  }
}
